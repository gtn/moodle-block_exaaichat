{"version":3,"file":"lib.min.js","sources":["../src/lib.js"],"sourcesContent":["/* eslint-disable */\r\nvar questionString = 'Ask a question...'\r\nvar errorString = 'An error occurred! Please try again later.'\r\n\r\nexport const init = (data) => {\r\n    console.log('JS init lib called'); // Add logging for debug\r\n    const blockId = data['blockId']\r\n    const api_type = data['api_type']\r\n    const persistConvo = data['persistConvo']\r\n\r\n    // Initialize local data storage if necessary\r\n    // If a thread ID exists for this block, make an API request to get existing messages\r\n    if (api_type === 'assistant') {\r\n        chatData = localStorage.getItem(\"block_exaaichat_data\")\r\n        if (chatData) {\r\n            chatData = JSON.parse(chatData)\r\n            if (chatData[blockId] && chatData[blockId]['threadId'] && persistConvo === \"1\") {\r\n                fetch(`${M.cfg.wwwroot}/blocks/exaaichat/api/thread.php?thread_id=${chatData[blockId]['threadId']}`)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    for (let message of data) {\r\n                        addToChatLog(message.role === 'user' ? 'user' : 'bot', message.message, blockId)\r\n                    }\r\n                })\r\n                // Some sort of error in the API call. Probably the thread no longer exists, so lets reset it\r\n                .catch(error => {\r\n                    chatData[blockId] = {}\r\n                    localStorage.setItem(\"block_exaaichat_data\", JSON.stringify(chatData));\r\n                })\r\n            // The block ID doesn't exist in the chat data object, so let's create it\r\n            } else {\r\n                chatData[blockId] = {}\r\n            }\r\n        // We don't even have a chat data object, so we'll create one\r\n        } else {\r\n            chatData = {[blockId]: {}}\r\n        }\r\n        localStorage.setItem(\"block_exaaichat_data\", JSON.stringify(chatData));\r\n    }\r\n\r\n  if (api_type === 'responses') {\r\n    chatData = localStorage.getItem(\"block_exaaichat_data\")\r\n    if (chatData) {\r\n      chatData = JSON.parse(chatData)\r\n      if (chatData[blockId] && chatData[blockId]['threadId'] && persistConvo === \"1\") {\r\n        // fetch(`${M.cfg.wwwroot}/blocks/exaaichat/api/thread.php?thread_id=${chatData[blockId]['threadId']}`)\r\n        //   .then(response => response.json())\r\n        //   .then(data => {\r\n        //     for (let message of data) {\r\n        //       addToChatLog(message.role === 'user' ? 'user' : 'bot', message.message, blockId)\r\n        //     }\r\n        //   })\r\n        //   // Some sort of error in the API call. Probably the thread no longer exists, so lets reset it\r\n        //   .catch(error => {\r\n        //     chatData[blockId] = {}\r\n        //     localStorage.setItem(\"block_exaaichat_data\", JSON.stringify(chatData));\r\n        //   })\r\n        // The block ID doesn't exist in the chat data object, so let's create it\r\n        chatData[blockId] = {}\r\n      } else {\r\n        chatData[blockId] = {}\r\n      }\r\n      // We don't even have a chat data object, so we'll create one\r\n    } else {\r\n      chatData = {[blockId]: {}}\r\n    }\r\n    localStorage.setItem(\"block_exaaichat_data\", JSON.stringify(chatData));\r\n  }\r\n\r\n  // Prevent sidebar from closing when osk pops up (hack for MDL-77957)\r\n    window.addEventListener('resize', event => {\r\n        event.stopImmediatePropagation();\r\n    }, true);\r\n\r\n    document.querySelector(`.block_exaaichat[data-instance-id='${blockId}'] #openai_input`).addEventListener('keyup', e => {\r\n        if (e.which === 13 && e.target.value !== \"\") {\r\n            addToChatLog('user', e.target.value, blockId)\r\n            createCompletion(e.target.value, blockId, api_type)\r\n            e.target.value = ''\r\n        }\r\n    })\r\n    document.querySelector(`.block_exaaichat[data-instance-id='${blockId}'] #go`).addEventListener('click', e => {\r\n        const input = document.querySelector('#openai_input')\r\n        if (input.value !== \"\") {\r\n            addToChatLog('user', input.value, blockId)\r\n            createCompletion(input.value, blockId, api_type)\r\n            input.value = ''\r\n        }\r\n    })\r\n\r\n    document.querySelector(`.block_exaaichat[data-instance-id='${blockId}'] #refresh`).addEventListener('click', e => {\r\n        clearHistory(blockId)\r\n    })\r\n\r\n    document.querySelector(`.block_exaaichat[data-instance-id='${blockId}'] #popout`).addEventListener('click', e => {\r\n        if (document.querySelector('.drawer.drawer-right')) {\r\n            document.querySelector('.drawer.drawer-right').style.zIndex = '1041'\r\n        }\r\n        document.querySelector(`.block_exaaichat[data-instance-id='${blockId}']`).classList.toggle('expanded')\r\n    })\r\n\r\n    require(['core/str'], function(str) {\r\n        var strings = [\r\n            {\r\n                key: 'askaquestion',\r\n                component: 'block_exaaichat'\r\n            },\r\n            {\r\n                key: 'erroroccurred',\r\n                component: 'block_exaaichat'\r\n            },\r\n        ];\r\n        str.get_strings(strings).then((results) => {\r\n            questionString = results[0];\r\n            errorString = results[1];\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Add a message to the chat UI\r\n * @param {string} type Which side of the UI the message should be on. Can be \"user\" or \"bot\"\r\n * @param {string} message The text of the message to add\r\n * @param {int} blockId The ID of the block to manipulate\r\n */\r\nconst addToChatLog = (type, message, blockId) => {\r\n    let messageContainer = document.querySelector(`.block_exaaichat[data-instance-id='${blockId}'] #exaaichat_log`)\r\n\r\n    const messageElem = document.createElement('div')\r\n    messageElem.classList.add('openai_message')\r\n    for (let className of type.split(' ')) {\r\n        messageElem.classList.add(className)\r\n    }\r\n\r\n    const messageText = document.createElement('span')\r\n    messageText.innerHTML = message\r\n    messageElem.append(messageText)\r\n\r\n    messageContainer.append(messageElem)\r\n    if (messageText.offsetWidth) {\r\n        messageElem.style.width = (messageText.offsetWidth + 40) + \"px\"\r\n    }\r\n    messageContainer.scrollTop = messageContainer.scrollHeight\r\n    messageContainer.closest('.block_exaaichat > div').scrollTop = messageContainer.scrollHeight\r\n}\r\n\r\n/**\r\n * Clears the thread ID from local storage and removes the messages from the UI in order to refresh the chat\r\n */\r\nconst clearHistory = (blockId) => {\r\n    chatData = localStorage.getItem(\"block_exaaichat_data\")\r\n    if (chatData) {\r\n        chatData = JSON.parse(chatData)\r\n        if (chatData[blockId]) {\r\n            chatData[blockId] = {}\r\n            localStorage.setItem(\"block_exaaichat_data\", JSON.stringify(chatData));\r\n        }\r\n    }\r\n    document.querySelector(`.block_exaaichat[data-instance-id='${blockId}'] #exaaichat_log`).innerHTML = \"\"\r\n}\r\n\r\n/**\r\n * Makes an API request to get a completion from GPT-3, and adds it to the chat log\r\n * @param {string} message The text to get a completion for\r\n * @param {int} blockId The ID of the block this message is being sent from -- used to override settings if necessary\r\n * @param {string} api_type \"assistant\" | \"chat\" The type of API to use\r\n */\r\nconst createCompletion = (message, blockId, api_type) => {\r\n    let threadId = null\r\n    let chatData\r\n\r\n    // If the type is assistant, attempt to fetch a thread ID\r\n    if (api_type === 'assistant' || api_type === 'responses') {\r\n        chatData = localStorage.getItem(\"block_exaaichat_data\")\r\n        if (chatData) {\r\n            chatData = JSON.parse(chatData)\r\n            if (chatData[blockId]) {\r\n                threadId = chatData[blockId]['threadId'] || null\r\n            }\r\n        } else {\r\n            // create the chat data item if necessary\r\n            chatData = {[blockId]: {}}\r\n        }\r\n    }\r\n\r\n    const history = buildTranscript(blockId)\r\n\r\n    document.querySelector(`.block_exaaichat[data-instance-id='${blockId}'] #control_bar`).classList.add('disabled')\r\n    document.querySelector(`.block_exaaichat[data-instance-id='${blockId}'] #openai_input`).classList.remove('error')\r\n    document.querySelector(`.block_exaaichat[data-instance-id='${blockId}'] #openai_input`).placeholder = questionString\r\n    document.querySelector(`.block_exaaichat[data-instance-id='${blockId}'] #openai_input`).blur()\r\n    addToChatLog('bot loading', '...', blockId);\r\n\r\n    fetch(`${M.cfg.wwwroot}/blocks/exaaichat/api/completion.php`, {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            message: message,\r\n            history: history,\r\n            blockId: blockId,\r\n            threadId: threadId\r\n        })\r\n    })\r\n    .then(response => {\r\n        let messageContainer = document.querySelector(`.block_exaaichat[data-instance-id='${blockId}'] #exaaichat_log`)\r\n        messageContainer.removeChild(messageContainer.lastElementChild)\r\n        document.querySelector(`.block_exaaichat[data-instance-id='${blockId}'] #control_bar`).classList.remove('disabled')\r\n\r\n        if (!response.ok) {\r\n            throw Error(response.statusText)\r\n        } else {\r\n            return response.json()\r\n        }\r\n    })\r\n    .then(data => {\r\n        try {\r\n            addToChatLog('bot', data.message, blockId)\r\n            if (data.thread_id) {\r\n                chatData[blockId]['threadId'] = data.thread_id\r\n                localStorage.setItem(\"block_exaaichat_data\", JSON.stringify(chatData));\r\n            }\r\n        } catch (error) {\r\n            console.log(error)\r\n            addToChatLog('bot', data.error.message, blockId)\r\n        }\r\n        document.querySelector(`.block_exaaichat[data-instance-id='${blockId}'] #openai_input`).focus()\r\n    })\r\n    .catch(error => {\r\n        console.log(error)\r\n        document.querySelector(`.block_exaaichat[data-instance-id='${blockId}'] #openai_input`).classList.add('error')\r\n        document.querySelector(`.block_exaaichat[data-instance-id='${blockId}'] #openai_input`).placeholder = errorString\r\n    })\r\n}\r\n\r\n/**\r\n * Using the existing messages in the chat history, create a string that can be used to aid completion\r\n * @param {int} blockId The block from which to build the history\r\n * @return {JSONObject} A transcript of the conversation up to this point\r\n */\r\nconst buildTranscript = (blockId) => {\r\n    let transcript = []\r\n    document.querySelectorAll(`.block_exaaichat[data-instance-id='${blockId}'] .openai_message`).forEach((message, index) => {\r\n        if (index === document.querySelectorAll(`.block_exaaichat[data-instance-id='${blockId}'] .openai_message`).length - 1) {\r\n            return\r\n        }\r\n\r\n        let user = userName\r\n        if (message.classList.contains('bot')) {\r\n            user = assistantName\r\n        }\r\n        transcript.push({\"user\": user, \"message\": message.innerText})\r\n    })\r\n\r\n    return transcript\r\n}\r\n"],"names":["questionString","errorString","data","console","log","blockId","api_type","persistConvo","chatData","localStorage","getItem","JSON","parse","fetch","M","cfg","wwwroot","then","response","json","message","addToChatLog","role","catch","error","setItem","stringify","window","addEventListener","event","stopImmediatePropagation","document","querySelector","e","which","target","value","createCompletion","input","clearHistory","style","zIndex","classList","toggle","require","str","get_strings","key","component","results","type","messageContainer","messageElem","createElement","add","className","split","messageText","innerHTML","append","offsetWidth","width","scrollTop","scrollHeight","closest","threadId","history","buildTranscript","remove","placeholder","blur","method","body","removeChild","lastElementChild","ok","Error","statusText","thread_id","focus","transcript","querySelectorAll","forEach","index","length","user","userName","contains","assistantName","push","innerText"],"mappings":"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"}